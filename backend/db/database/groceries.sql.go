// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: groceries.sql

package database

import (
	"context"
)

const countGroceries = `-- name: CountGroceries :one
SELECT COUNT(*) 
FROM grocery_items
WHERE 
  ($1::boolean IS NULL AND bought_at IS NULL) 
  OR ($1::boolean = TRUE AND bought_at IS NOT NULL)
  OR ($1::boolean = FALSE AND bought_at IS NULL)
`

func (q *Queries) CountGroceries(ctx context.Context, dollar_1 bool) (int64, error) {
	row := q.db.QueryRow(ctx, countGroceries, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getGroceries = `-- name: GetGroceries :many
SELECT id, name, created_at, deleted_at, bought_at, updated_at 
FROM grocery_items
WHERE 
  ($1::boolean IS NULL AND bought_at IS NULL)
  OR ($1::boolean = TRUE AND bought_at IS NOT NULL)
  OR ($1::boolean = FALSE AND bought_at IS NULL)  
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetGroceriesParams struct {
	Column1 bool
	Limit   int32
	Offset  int32
}

func (q *Queries) GetGroceries(ctx context.Context, arg GetGroceriesParams) ([]GroceryItem, error) {
	rows, err := q.db.Query(ctx, getGroceries, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroceryItem
	for rows.Next() {
		var i GroceryItem
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.BoughtAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
